package com.cbfacademy.frugalflyer.flights.flight;

import java.time.LocalDate;

import com.cbfacademy.frugalflyer.flights.airport.Airport;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;

@Entity
@Table(name = "flights")
public class Flight {

    /**
     * ID of the flight, which will be automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    /** 
     * Airport which the flight departs from.
     * Many To One annotation indicates that many flight entities can be associated with one airport.
     * departure_airport_id will store the foreign key reference to the airport entity.
     */
    @ManyToOne
    @JoinColumn(name = "departure_airport_id")
    private Airport departureAirport;
    /** 
     * Airport which the flight arrives at.
     * arrival_airport_id will store the foreign key reference to the airport entity.
     */
    @ManyToOne
    @JoinColumn(name = "arrival_airport_id")
    private Airport arrivalAirport;
    /**
     * Price of the flight.
     */
    private double price;
    /**
     * Departure date of the flight.
     */
    private LocalDate departureDate;

    public Flight(Airport departureAirport, Airport arrivalAirport, double price, LocalDate departureDate) {
        this.departureAirport = departureAirport;
        this.arrivalAirport = arrivalAirport;
        this.price = price;
        this.departureDate = departureDate;
    }

    public Flight() {
        this(null, null, 0.00, null);
    }

    /**
     * Gets the ID of the flight.
     * @return the flight ID.
     */
    public long getId() {
        return id;
    }

    /**
     * Sets the ID of the flight.
     * @param id the flight ID to set.
     */
    public void setId(long id) {
        this.id = id;
    }

    /**
     * Gets the origin airport of the flight.
     * @return the origin airport.
     */
    public Airport getdepartureAirport() {
        return departureAirport;
    }

    /**
     * Sets the origin airport of the flight.
     * @param departureAirport the origin airport to set.
     */
    public void setdepartureAirport(Airport departureAirport) {
        this.departureAirport = departureAirport;
    }

    /**
     * Gets the destination airport of the flight.
     * @return the destination airport.
     */
    public Airport getarrivalAirport() {
        return arrivalAirport;
    }

    /**
     * Sets the destination airport of the flight.
     * @param arrivalAirport the destination airport to set.
     */
    public void setarrivalAirport(Airport arrivalAirport) {
        this.arrivalAirport = arrivalAirport;
    }

    /**
     * Gets the price of the flight.
     * @return the price.
     */
    public double getPrice() {
        return price;
    }

    /**
     * Sets the price of the flight.
     * @param price the price to set.
     */
    public void setPrice(double price) {
        this.price = price;
    }

    /**
     * Gets the departure date of the flight.
     * @return the departure date.
     */
    public LocalDate getDepartureDate() {
        return departureDate;
    }

    /**
     * Sets the departure date of the flight.
     * @param departureDate the departure date to set.
     */
    public void setDepartureDate(LocalDate departureDate) {
        this.departureDate = departureDate;
    }
}
